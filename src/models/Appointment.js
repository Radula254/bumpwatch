import mongoose, { model, models, Schema } from "mongoose";

const SymptomSchema = new Schema({
  morning_sickness: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  morning_sickness_notes: { type: String, default: "" },
  fatigue: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  fatigue_notes: { type: String, default: "" },
  breast_tenderness: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  breast_tenderness_notes: { type: String, default: "" },
  headaches: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  headaches_notes: { type: String, default: "" },
  cravings_aversions: { type: String, default: "" },
  mood_changes: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  mood_changes_notes: { type: String, default: "" },
  back_pain: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  back_pain_notes: { type: String, default: "" },
  swelling: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  swelling_notes: { type: String, default: "" },
  heartburn: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  heartburn_notes: { type: String, default: "" },
  urination: { type: String, enum: ["normal", "increased"], default: "normal" },
  urination_notes: { type: String, default: "" },
  sleep_disturbances: {
    type: String,
    enum: ["none", "mild", "moderate", "severe"],
    default: "none",
  },
  sleep_disturbances_notes: { type: String, default: "" },
});

const MedicalSchema = new Schema({
  foetalHeartRate: { type: String },
  diagnosis: { type: String },
  start: { type: Date },
  dueDate: { type: Date },
  children: { type: String },
  physicalExamination: { type: String },
  complaints: { type: String },
  nonDrugPrescription: { type: String },
  gestationalAge: { type: String },
  gravida: { type: String },
  para: { type: String },
  lmp: { type: Date },
  fullTermBirths: { type: String },
  pretermBirths: { type: String },
  abortions: { type: String },
  livingChildren: { type: String },
  visitDate: { type: Date },
  visitNumber: { type: String },
  bloodPressure: { type: String },
  heartRate: { type: String },
  respiratoryRate: { type: String },
  temperature: { type: String },
  weight: { type: String },
  fundalHeight: { type: String },
  fetalHeartRate: { type: String },
  fetalMovement: { type: String, enum: ["Yes", "No"] },
  presentation: { type: String },
  position: { type: String },
  dilation: { type: String },
  effacement: { type: String },
  station: { type: String },
  vaginalBleeding: { type: String, enum: ["Yes", "No"] },
  leakingFluid: { type: String, enum: ["Yes", "No"] },
  contractions: { type: String, enum: ["Yes", "No"] },
  swellingSymptom: { type: String, enum: ["Yes", "No"] },
  headacheSymptom: { type: String, enum: ["Yes", "No"] },
  visualDisturbances: { type: String, enum: ["Yes", "No"] },
  abdominalPain: { type: String, enum: ["Yes", "No"] },
  nauseaVomiting: { type: String, enum: ["Yes", "No"] },
  urinarySymptoms: { type: String },
  bloodTypeRh: { type: String },
  hemoglobinHematocrit: { type: String },
  urinalysis: { type: String },
  glucoseScreening: { type: String },
  groupBStrep: { type: String },
  ultrasoundDate: { type: Date },
  ultrasoundFindings: { type: String },
  estimatedFetalWeight: { type: String },
  fetalBiometry: { type: String },
  amnioticFluidIndex: { type: String },
  placentalLocation: { type: String },
  tdap: { type: String },
  fluVaccine: { type: String },
  otherVaccines: { type: String },
  currentMedications: { type: String },
  dietNutrition: { type: String },
  exercise: { type: String },
  signsOfPretermLabor: { type: String },
  signsOfPreeclampsia: { type: String },
  laborDeliveryPlan: { type: String },
  breastfeeding: { type: String },
  postpartumCare: { type: String },
  patientConcerns: { type: String },
  followUpDate: { type: Date },
  notes: { type: String },
  medical: {type: Boolean, default: true},
});

const AppointmentInfoSchema = new Schema(
  {
    email: { type: String, required: true },
    createdAppointment: { type: Boolean, default: false },
    selectedDoctor: { type: mongoose.Types.ObjectId, default: null },
    appointmentDate: { type: Date },
    weeks: { type: String },
    symptoms: SymptomSchema,
    medicalRecords: MedicalSchema,
  },
  { timestamps: true }
);

export const AppointmentInfo =
  models?.AppointmentInfo || model("AppointmentInfo", AppointmentInfoSchema);
